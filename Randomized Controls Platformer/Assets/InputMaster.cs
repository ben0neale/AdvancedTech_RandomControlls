//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""Player Controls 1"",
            ""id"": ""98e089cd-fc63-4a97-97d2-5b808d64e001"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""f8358c3b-1ee9-48d5-930c-00dcf098f3fd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchAction"",
                    ""type"": ""Button"",
                    ""id"": ""d6d27027-a5f2-4836-adc8-0ade0e3203eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""70f94cf3-2023-479c-acf1-9f36fa8a4fb5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3e633eb9-dc77-4c52-ac30-ca547b5cc6b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d0d218bd-2cd8-4792-b5ed-ddf1e32071a3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2d02b45b-7c14-4708-bdb3-572b22554954"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4b74cc5-8e47-4f3b-b85b-b19f6df2bdf7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e98694b5-6359-4e15-b695-52dce9898370"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Controls 2"",
            ""id"": ""eca5b502-7275-4993-a3fb-a6d14a0c5377"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a3f3fde8-e787-4733-b96f-671dd7cc00ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SwitchAction"",
                    ""type"": ""Button"",
                    ""id"": ""584f9d0a-02af-465a-89e5-fa5b8a8d9c5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""518b4366-8f4c-4988-96b3-5f40f68a7b8e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e261390a-7724-488f-b209-96653d6759d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0f7bb624-f74c-48b0-803e-1fb705a02e13"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5bfbd9c4-9bf0-4955-b373-b549c6d27b12"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""80e55669-0069-4dfb-bd67-a9e07a31adea"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ef9d6046-6e1a-4a2c-ad10-f2455578f8e0"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Controls 3"",
            ""id"": ""6feb3a47-2a9d-4203-af9a-ff1e39b5961b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ac430247-37d1-45ff-b93f-aa2f350eb954"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2d4f295-24e1-4b1a-88b8-7c25f6882ad8"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Controls 1
        m_PlayerControls1 = asset.FindActionMap("Player Controls 1", throwIfNotFound: true);
        m_PlayerControls1_Move = m_PlayerControls1.FindAction("Move", throwIfNotFound: true);
        m_PlayerControls1_SwitchAction = m_PlayerControls1.FindAction("SwitchAction", throwIfNotFound: true);
        // Player Controls 2
        m_PlayerControls2 = asset.FindActionMap("Player Controls 2", throwIfNotFound: true);
        m_PlayerControls2_Move = m_PlayerControls2.FindAction("Move", throwIfNotFound: true);
        m_PlayerControls2_SwitchAction = m_PlayerControls2.FindAction("SwitchAction", throwIfNotFound: true);
        // Player Controls 3
        m_PlayerControls3 = asset.FindActionMap("Player Controls 3", throwIfNotFound: true);
        m_PlayerControls3_Newaction = m_PlayerControls3.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Controls 1
    private readonly InputActionMap m_PlayerControls1;
    private List<IPlayerControls1Actions> m_PlayerControls1ActionsCallbackInterfaces = new List<IPlayerControls1Actions>();
    private readonly InputAction m_PlayerControls1_Move;
    private readonly InputAction m_PlayerControls1_SwitchAction;
    public struct PlayerControls1Actions
    {
        private @InputMaster m_Wrapper;
        public PlayerControls1Actions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControls1_Move;
        public InputAction @SwitchAction => m_Wrapper.m_PlayerControls1_SwitchAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControls1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControls1Actions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControls1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControls1ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SwitchAction.started += instance.OnSwitchAction;
            @SwitchAction.performed += instance.OnSwitchAction;
            @SwitchAction.canceled += instance.OnSwitchAction;
        }

        private void UnregisterCallbacks(IPlayerControls1Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SwitchAction.started -= instance.OnSwitchAction;
            @SwitchAction.performed -= instance.OnSwitchAction;
            @SwitchAction.canceled -= instance.OnSwitchAction;
        }

        public void RemoveCallbacks(IPlayerControls1Actions instance)
        {
            if (m_Wrapper.m_PlayerControls1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControls1Actions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControls1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControls1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControls1Actions @PlayerControls1 => new PlayerControls1Actions(this);

    // Player Controls 2
    private readonly InputActionMap m_PlayerControls2;
    private List<IPlayerControls2Actions> m_PlayerControls2ActionsCallbackInterfaces = new List<IPlayerControls2Actions>();
    private readonly InputAction m_PlayerControls2_Move;
    private readonly InputAction m_PlayerControls2_SwitchAction;
    public struct PlayerControls2Actions
    {
        private @InputMaster m_Wrapper;
        public PlayerControls2Actions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerControls2_Move;
        public InputAction @SwitchAction => m_Wrapper.m_PlayerControls2_SwitchAction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControls2Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControls2Actions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControls2ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControls2ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @SwitchAction.started += instance.OnSwitchAction;
            @SwitchAction.performed += instance.OnSwitchAction;
            @SwitchAction.canceled += instance.OnSwitchAction;
        }

        private void UnregisterCallbacks(IPlayerControls2Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @SwitchAction.started -= instance.OnSwitchAction;
            @SwitchAction.performed -= instance.OnSwitchAction;
            @SwitchAction.canceled -= instance.OnSwitchAction;
        }

        public void RemoveCallbacks(IPlayerControls2Actions instance)
        {
            if (m_Wrapper.m_PlayerControls2ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControls2Actions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControls2ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControls2ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControls2Actions @PlayerControls2 => new PlayerControls2Actions(this);

    // Player Controls 3
    private readonly InputActionMap m_PlayerControls3;
    private List<IPlayerControls3Actions> m_PlayerControls3ActionsCallbackInterfaces = new List<IPlayerControls3Actions>();
    private readonly InputAction m_PlayerControls3_Newaction;
    public struct PlayerControls3Actions
    {
        private @InputMaster m_Wrapper;
        public PlayerControls3Actions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PlayerControls3_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControls3Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayerControls3Actions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerControls3ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerControls3ActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPlayerControls3Actions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPlayerControls3Actions instance)
        {
            if (m_Wrapper.m_PlayerControls3ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerControls3Actions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerControls3ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerControls3ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerControls3Actions @PlayerControls3 => new PlayerControls3Actions(this);
    public interface IPlayerControls1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSwitchAction(InputAction.CallbackContext context);
    }
    public interface IPlayerControls2Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSwitchAction(InputAction.CallbackContext context);
    }
    public interface IPlayerControls3Actions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
